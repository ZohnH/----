
#pragma once 

#define N_OPTR 9 //运算符总数

typedef enum   //运算符集合
{ //加、减、乘、除、乘方、阶乘、左括号、右括号、起始符与终止符
	ADD, SUB, MUL, DIV, POW, FAC, L_P, R_P, EOE
}Operator;
/* 默认情况下是将整数值赋给枚举量，从0开始，依次类推
   可以通过显示地指定来覆盖默认值  */

const char pri[N_OPTR][N_OPTR] =  //运算符优先等级 [栈顶] [当前]
{
	/*              |----------- 当 前 运 算 符 --------------| */
	/*              +    -    *    /    ^    !    (    )   \0 */
	/* --  + */    '>', '>', '<', '<', '<', '<', '<', '>', '>',
	/* |   - */    '>', '>', '<', '<', '<', '<', '<', '>', '>',
	/* 栈  * */    '>', '>', '>', '>', '<', '<', '<', '>', '>',
	/* 顶  / */    '>', '>', '>', '>', '<', '<', '<', '>', '>',
	/* 运  ^ */    '>', '>', '>', '>', '>', '<', '<', '>', '>',
	/* 算  ! */    '>', '>', '>', '>', '>', '>', ' ', '>', '>',
	/* 符  ( */    '<', '<', '<', '<', '<', '<', '<', '=', ' ',
	/* |   ) */    ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
	/* -- \0 */    '<', '<', '<', '<', '<', '<', '<', ' ', '='
};
